<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WoOh&#39;s blog </title>
    <link>http://blog.wooh.hu/categories/github/</link>
    <language>en-us</language>
    <author>Adam Papai</author>
    <rights>(C) 2016</rights>
    <updated>2016-03-17 08:56:23 &#43;0100 CET</updated>

    
      
        <item>
          <title>Why You Should Never Push Your AWS Credentials to GitHub</title>
          <link>http://blog.wooh.hu/post/why-you-should-never-push-aws-credentials-to-github/</link>
          <pubDate>Thu, 17 Mar 2016 08:56:23 CET</pubDate>
          <author>Adam Papai</author>
          <guid>http://blog.wooh.hu/post/why-you-should-never-push-aws-credentials-to-github/</guid>
          <description>

&lt;p&gt;This is a story of a friend of mine who has a strange hobby: He loves &lt;code&gt;nodejs&lt;/code&gt; and other javascript related frameworks. A few days ago unfortunately I sent him a &lt;a href=&#34;http://claudiajs.com&#34;&gt;link&lt;/a&gt; about &lt;code&gt;Claudia.js&lt;/code&gt;. Which is actually a cool thing by &lt;a href=&#34;https://gojko.net/&#34;&gt;Gojko Adzic&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Deploy Node.js microservices to AWS easily&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;He was so excited. He never used Amazon Web Services before so he signed up for an &lt;a href=&#34;https://aws.amazon.com/free/&#34;&gt;AWS Free Tier&lt;/a&gt;. He found a few tutorials, and he just followed the steps in the tutorial.&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//player.vimeo.com/video/156232471&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
 &lt;/div&gt;


&lt;h3 id=&#34;the-email-you-never-want-to-get:f2279535fa1b5adb6ac0b81e3bcc6f75&#34;&gt;The Email You NEVER Want to Get&lt;/h3&gt;

&lt;p&gt;Tree days later on a sunny morning, he asked me if there is anything to do with &lt;code&gt;AWS credentials&lt;/code&gt;. He got an e-mail from AWS to remove his AWS credentials. He was pretty calm, had no idea that this is something pretty serious.&lt;/p&gt;

&lt;p&gt;Hmm, that sounded pretty bad, so I asked him to forward the e-mail to me. Actually it was THE email you never want to get.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Amazon Web Services has opened case xxxxxx on your behalf.&lt;/p&gt;

&lt;p&gt;The details of the case are as follows:&lt;/p&gt;

&lt;p&gt;Case ID: xxxxxx&lt;br /&gt;
Subject: Your AWS account is compromised&lt;br /&gt;
Severity: Low&lt;br /&gt;
Correspondence: Dear AWS Customer,&lt;/p&gt;

&lt;p&gt;Your AWS Account is compromised! Please review the following notice and take &amp;gt;immediate action to secure your account.&lt;/p&gt;

&lt;p&gt;Your security is important to us. We have become aware that the AWS Access Key AKIAXXXX (belonging to IAM user &amp;ldquo;xxx&amp;rdquo;) along with the corresponding Secret Key is publicly available online at github.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.wooh.hu/images/aws-exposed/commit.jpg&#34; alt=&#34;github commit&#34; title=&#34;GitHub Commit&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Holy shit. It seems he had accidentally committed his AWS keys to GitHub. At this point I made a phone call and asked him to quickly review his AWS account. He logged in and saw 20 running instances instead of his t2.micro. His account was full of &lt;code&gt;g2.8xlarge&lt;/code&gt; instance types. That&amp;rsquo;s not that cheap.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.wooh.hu/images/aws-exposed/nano.jpg&#34; alt=&#34;nano&#34; title=&#34;Nano&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So I asked him to immediately deactivate all AWS API keys and terminate all instances in his current region and asked him to check all regions too. Unfortunately it wasn&amp;rsquo;t enough. Replacement servers were fired up after a few minutes. I knew that it won&amp;rsquo;t be that simple, so I felt I have to do it myself.&lt;/p&gt;

&lt;p&gt;I logged in with this root AWS credentials and navigated to the &lt;code&gt;Auto Scaling Groups&lt;/code&gt;, but that was empty. My next tip was &lt;code&gt;Spot Request&lt;/code&gt; instances. Bingo. There were &lt;strong&gt;20&lt;/strong&gt; spot requests / region with &lt;code&gt;$3.2&lt;/code&gt; max price.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.wooh.hu/images/aws-exposed/spot-requests.jpg&#34; alt=&#34;spot bids&#34; title=&#34;Spot Bids&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Luckily&amp;rdquo; his instance and spot limit were around 20, so I cancelled all spot bids and terminated all servers too. Double checked all regions.&lt;/p&gt;

&lt;h3 id=&#34;the-worst-part:f2279535fa1b5adb6ac0b81e3bcc6f75&#34;&gt;The worst part&lt;/h3&gt;

&lt;p&gt;As the account was cleaned up, it was time to check the billing. His account was exposed for about 2-3 days, which can cause a lot of instance hours. I clicked on the &lt;code&gt;Billing &amp;amp; Cost Management&lt;/code&gt; tab and saw the following on the dashboard:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.wooh.hu/images/aws-exposed/billing.jpg&#34; alt=&#34;billing&#34; title=&#34;Billing&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Current balance is &lt;strong&gt;$6,437&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Oh my. I wasn&amp;rsquo;t quite sure how to tell him. I was shocked. I asked my colleague about this, and he told me that:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;AWS will probably credit him back if he gets it closed up quickly&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I hope this is the case and he won&amp;rsquo;t need to pay that.&lt;/p&gt;

&lt;h3 id=&#34;takeaway:f2279535fa1b5adb6ac0b81e3bcc6f75&#34;&gt;Takeaway&lt;/h3&gt;

&lt;p&gt;Can&amp;rsquo;t emphasize enough how important is to keep your credentials safe. What can you do to prevent this happening from the future?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Use ephemeral tokens if possible. This is provided by &lt;a href=&#34;http://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html&#34;&gt;AWS Security Token Service&lt;/a&gt;. You can define temporary cedentials with it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The temporary security credentials are valid for the duration that you specified when calling AssumeRole, which can be from 900 seconds (15 minutes) to a maximum of 3600 seconds (1 hour). The default is 1 hour.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/blogs/aws/monitor-estimated-costs-using-amazon-cloudwatch-billing-metrics-and-alarms/&#34;&gt;Monitor Estimated Charges Using Billing Alerts&lt;/a&gt; on a daily basis. There are tools out there already.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Remove keys after using them. If you&amp;rsquo;re done with experimenting, do not leave the keys there. Just remove them.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Decrease your default limits. If you know you won&amp;rsquo;t need ~20 instances only 1-2, open a support ticket and ask them to decrease your instance limits.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use IAM roles and policies. Restrict the accesses of the keys to as minimum as you can. A few examples are &lt;a href=&#34;http://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_examples.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Do not store your credentials on github without encrpyting them.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
      
    

  </channel>
</rss>
